// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  name         String
  email        String   @unique
  passwordHash String
  isVerified   Boolean  @default(false)
  role         Role
  referralCode String   @unique
  referredBy   String? // kode referral
  createdAt    DateTime @default(now())

  events        Event[]        @relation("OrganizedEvents")
  registrations Registration[]
  reviews       Review[]
  points        Point[]
  redemptions   Redemption[]
  referralsSent Referral[]     @relation("Referrer")
  referralsRecv Referral[]     @relation("Referred")
}

model Event {
  id             Int      @id @default(autoincrement())
  organizerId    Int
  title          String
  description    String
  location       String
  startDate      DateTime
  endDate        DateTime
  price          Int?
  isPaid         Boolean  @default(false)
  totalSeats     Int
  availableSeats Int
  category       String
  createdAt      DateTime @default(now())

  organizer     User           @relation("OrganizedEvents", fields: [organizerId], references: [id])
  ticketTypes   TicketType[]
  registrations Registration[]
  reviews       Review[]
  promotions    Promotion[]
}

model TicketType {
  id      Int    @id @default(autoincrement())
  eventId Int
  name    String
  price   Int
  quota   Int

  event         Event          @relation(fields: [eventId], references: [id])
  registrations Registration[]
}

model Registration {
  id             Int                @id @default(autoincrement())
  userId         Int
  eventId        Int
  ticketTypeId   Int
  finalPrice     Int
  usedPoints     Int                @default(0)
  discountAmount Int                @default(0)
  status         RegistrationStatus
  createdAt      DateTime           @default(now())

  user       User        @relation(fields: [userId], references: [id])
  event      Event       @relation(fields: [eventId], references: [id])
  ticketType TicketType  @relation(fields: [ticketTypeId], references: [id])
  redemption Redemption?
}

model Review {
  id        Int      @id @default(autoincrement())
  userId    Int
  eventId   Int
  rating    Int
  comment   String
  createdAt DateTime @default(now())

  user  User  @relation(fields: [userId], references: [id])
  event Event @relation(fields: [eventId], references: [id])
}

model Promotion {
  id                 Int      @id @default(autoincrement())
  eventId            Int
  code               String   @unique
  description        String?
  discountPercentage Int?
  discountAmount     Int?
  maxUsage           Int
  validUntil         DateTime

  event Event @relation(fields: [eventId], references: [id])
}

model Referral {
  id             Int      @id @default(autoincrement())
  referrerId     Int
  referredUserId Int
  usedAt         DateTime @default(now())

  referrer     User   @relation("Referrer", fields: [referrerId], references: [id])
  referredUser User   @relation("Referred", fields: [referredUserId], references: [id])
  point        Point? @relation("ReferralToPoint") // relasi balik
}

model Point {
  id           Int      @id @default(autoincrement())
  userId       Int
  earnedFromId Int      @unique
  points       Int      @default(10000)
  earnedAt     DateTime @default(now())
  expiresAt    DateTime
  redeemed     Boolean  @default(false)

  user       User     @relation(fields: [userId], references: [id])
  earnedFrom Referral @relation("ReferralToPoint", fields: [earnedFromId], references: [id])
}

model Redemption {
  id             Int      @id @default(autoincrement())
  userId         Int
  registrationId Int      @unique
  pointsUsed     Int
  createdAt      DateTime @default(now())

  user         User         @relation(fields: [userId], references: [id])
  registration Registration @relation(fields: [registrationId], references: [id])
}

enum Role {
  ADMIN
  CUSTOMER
  ORGANIZER
}

enum RegistrationStatus {
  PENDING
  PAID
  CANCELLED
}
